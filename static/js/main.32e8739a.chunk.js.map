{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Cards/Cards.jsx","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","images/coronaImg.png"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","barChart","backgroundColor","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImg","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.32e8739a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async(country) => {\n    let changeableUrl = url;\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch (err) {\n        console.log(err)\n    }\n}\n\nexport const fetchDailyData = async() => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }))\n        return modifiedData;\n    } catch (err) {\n        console.log(err)\n    }\n}\n\nexport const fetchCountries = async() => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error)\n    }\n}","import React from 'react';\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core'\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({data:{ confirmed, recovered, deaths, lastUpdate}}) =>{\n    if(!confirmed){\n        return 'Loading...';\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify='center'>\n                <Grid item component= {Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom> Infected </Typography>\n                        <Typography variant =\"h5\">\n                            <CountUp\n                                start = {0}\n                                end = {confirmed.value}\n                                duration = {2.5}\n                                separator = {','}\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography  variant=\"body2\">Number of active cases of COVID-19</Typography>\n                    </CardContent>    \n                </Grid>    \n\n                <Grid item component= {Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom> Recovered </Typography>\n                        <Typography variant =\"h5\">\n                        <CountUp\n                                start = {0}\n                                end = {recovered.value}\n                                duration = {2.5}\n                                separator = {','}\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography  variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>    \n                </Grid>    \n\n                <Grid item component= {Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom> Deaths</Typography>\n                        <Typography variant =\"h5\">\n                        <CountUp\n                                start = {0}\n                                end = {deaths.value}\n                                duration = {2.5}\n                                separator = {','}\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography  variant=\"body2\">Number of deaths caused by COVID-19</Typography>\n                    </CardContent>    \n                </Grid>    \n            </Grid>\n        </div>\n      \n    )\n}\n\nexport default Cards;","import React, {useState, useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line, Bar } from 'react-chartjs-2';\nimport styles from './Charts.module.css';\n\nconst Chart = ({data :{confirmed, deaths, recovered}, country}) =>{\n\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async() => {\n            setDailyData(await fetchDailyData());\n        }\n\n        console.log(dailyData);\n\n        fetchAPI();\n    },[]);\n\n    const lineChart = (\n        dailyData.length\n        ? (<Line data= {{ labels: dailyData.map(({ date }) => date)  ,datasets: [{\n            data: dailyData.map(({confirmed}) => confirmed ),\n            label: 'Infected',\n            borderColor: '#3333ff',\n            fill : true,\n        }, {\n            data: dailyData.map(({ deaths }) => deaths ),\n            label: 'Deaths',\n            borderColor: 'rgba(255,0,0,0.5)',\n            fill : true,\n        }],}} />) \n        : null    \n    )\n\n    const barChart = (\n        confirmed\n            ?(\n                <Bar\n                    data={{\n                        labels: ['Infected', 'Recovered','Deaths'],\n                        datasets : [{\n                            label: 'people',\n                            backgroundColor:[\n                                'rgba(0, 0, 255, 0.5)',\n                                'rgba(0, 255, 0 , 0.5)',\n                                'rgba(255, 0, 0, 0.5)',\n                            ],\n                            data : [confirmed.value, recovered.value, deaths.value]\n                        }]\n                    }}\n                    options={{ \n                        legend: { display: false},\n                        title: {display:true, text: `Current state in ${country} `},\n                    }}\n                />\n            ):null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart :lineChart} \n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport {fetchCountries} from '../../api';\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({ handleCountryChange}) =>{\n\n    const [ fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async() =>  {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    },[setFetchedCountries]);\n\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\"> Global</option>\n                {fetchedCountries.map((country,i)=> <option key={i} value={country} >{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport {Cards, Chart, CountryPicker} from './components';\nimport coronaImg from './images/coronaImg.png';\n\nclass App  extends React.Component{\n\n  state = {\n    data : {},\n    country : '',\n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({data : fetchedData})\n  }\n\n  handleCountryChange = async( country ) =>{\n    const fetchedData = await fetchData( country );\n    this.setState({data: fetchedData, country: country});\n  }\n\n  render(){\n\n    const {data, country} = this.state;\n\n    return ( \n      <div className={styles.container} >\n        <img className={styles.image} src = {coronaImg} alt=\"COVID-19\" />\n        <Cards data ={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>     \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/coronaImg.d7265326.png\";"],"sourceRoot":""}